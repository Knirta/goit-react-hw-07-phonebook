{"version":3,"sources":["redux/contacts/contacts-actions.js","services/contacts-api.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["contactsActions","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsAPI","fetchContacts","get","addContact","contact","post","deleteContact","id","delete","dispatch","a","data","name","number","getContacts","state","contacts","items","getFilter","filter","getFilteredItems","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","contactsSelectors","useDispatch","reset","handleChange","e","currentTarget","value","className","onSubmit","preventDefault","find","alert","contactsOperations","type","pattern","title","required","onChange","Filter","ContactListItem","onClick","ContactList","map","Container","children","App","useEffect","length","createReducer","_","payload","isLoading","error","addContactsError","addContactsRequest","deleteContactsError","deleteContactsRequest","combineReducers","middleware","getDefaultMiddleware","store","configureStore","reducer","contactsReducer","devtools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e29be33e.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nconst fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\nconst fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\nconst fetchContactsError = createAction(\"contacts/fetchContactsError\");\n\nconst addContactRequest = createAction(\"contacts/addContactRequest\");\nconst addContactSuccess = createAction(\"contacts/addContactSuccess\");\nconst addContactError = createAction(\"contacts/addContactError\");\n\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\nconst deleteContactError = createAction(\"contacts/deleteContactError\");\n\nconst changeFilter = createAction(\"contacts/changeFilter\");\n\nconst contactsActions = {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n};\n\nexport default contactsActions;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = \"http://localhost:4040\";\n\nfunction fetchContacts() {\n  return axios.get(\"/contacts\");\n}\n\nfunction addContact(contact) {\n  return axios.post(\"/contacts\", contact);\n}\n\nfunction deleteContact(id) {\n  return axios.delete(`/contacts/${id}`);\n}\n\nconst contactsAPI = { fetchContacts, addContact, deleteContact };\n\nexport default contactsAPI;\n","import contactsActions from \"./contacts-actions\";\nimport contactsAPI from \"services/contacts-api\";\n\nexport const fetchContacts = () => async (dispatch) => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const { data } = await contactsAPI.fetchContacts();\n    dispatch(contactsActions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};\n\nexport const addContact =\n  ({ name, number }) =>\n  async (dispatch) => {\n    const contact = { name, number };\n    dispatch(contactsActions.addContactRequest());\n\n    try {\n      const { data } = await contactsAPI.addContact(contact);\n      dispatch(contactsActions.addContactSuccess(data));\n    } catch (error) {\n      dispatch(contactsActions.addContactError(error));\n    }\n  };\n\nexport const deleteContact = (id) => async (dispatch) => {\n  dispatch(contactsActions.deleteContactRequest());\n\n  try {\n    await contactsAPI.deleteContact(id);\n    dispatch(contactsActions.deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error));\n  }\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getFilteredItems = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { contactsSelectors, contactsOperations } from \"redux/contacts\";\nimport \"./ContactForm.scss\";\n\nconst ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(name + \" is already in contacts\");\n      reset();\n      return;\n    }\n    dispatch(contactsOperations.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <label>\n        <p className=\"Form__label\">Name:</p>\n        <input\n          className=\"Form__input\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </label>\n      <label>\n        <p className=\"Form__label\">Number:</p>\n        <input\n          className=\"Form__input\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className=\"Form__button\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { contactsActions, contactsSelectors } from \"redux/contacts/\";\nimport \"./Filter.scss\";\n\nconst Filter = () => {\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n  return (\n    <label>\n      <p className=\"Filter__title\">Find contacts by name</p>\n      <input\n        className=\"Filter__input\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) =>\n          dispatch(contactsActions.changeFilter(e.currentTarget.value))\n        }\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { contactsOperations } from \"redux/contacts/\";\nimport \"./ContactListItem.scss\";\n\nconst ContactListItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  return (\n    <li className=\"Item\">\n      <p>\n        {name}: {number}\n      </p>\n      <button\n        className=\"Item__button\"\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactListItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ContactListItem from \"components/ContactListItem\";\nimport { contactsSelectors } from \"redux/contacts/\";\nimport \"./ContactList.scss\";\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getFilteredItems);\n\n  return (\n    <ul className=\"ContactList\">\n      {contacts.map((contact) => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Container.scss\";\n\nconst Container = ({ children }) => {\n  return <div className=\"Container\">{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactList from \"components/ContactList\";\nimport Container from \"components/Container\";\nimport { contactsSelectors, contactsOperations } from \"redux/contacts\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"title\">Contacts</h2>\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <p>There are no contacts yet...</p>\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactsActions from \"./contacts-actions\";\n\nconst items = createReducer([], {\n  [contactsActions.fetchContactsSuccess]: (_, { payload }) => payload,\n  [contactsActions.addContactSuccess]: (state, { payload }) => [\n    payload,\n    ...state,\n  ],\n  [contactsActions.deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [contactsActions.fetchContactsRequest]: () => true,\n  [contactsActions.fetchContactsSuccess]: () => false,\n  [contactsActions.fetchContactsError]: () => false,\n\n  [contactsActions.addContactRequest]: () => true,\n  [contactsActions.addContactSuccess]: () => false,\n  [contactsActions.addContactError]: () => false,\n\n  [contactsActions.deleteContactRequest]: () => true,\n  [contactsActions.deleteContactSuccess]: () => false,\n  [contactsActions.deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [contactsActions.fetchContactsError]: (_, { payload }) => payload,\n  [contactsActions.fetchContactsRequest]: () => null,\n\n  [contactsActions.addContactsError]: (_, { payload }) => payload,\n  [contactsActions.addContactsRequest]: () => null,\n\n  [contactsActions.deleteContactsError]: (_, { payload }) => payload,\n  [contactsActions.deleteContactsRequest]: () => null,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  isLoading,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\nconst middleware = getDefaultMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devtools: process.env.NODE_ENV === \"development\",\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./styles/base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}